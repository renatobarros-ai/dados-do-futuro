# **âš¡ FASE 1 - Etapa 1: Setup Base**

## **Atividade 1: Criar projeto Vite**
```bash
npm create vite@latest dados-do-futuro -- --template react-ts
cd dados-do-futuro
```

## **Atividade 2: Instalar dependÃªncias**
```bash
npm install react-router-dom tailwindcss chart.js xlsx lucide-react
npm install -D @types/node postcss autoprefixer
npx tailwindcss init -p
```

## **Atividade 3: Configurar Tailwind + Design Tokens**

### **tailwind.config.js**
```javascript
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: 'class',
  theme: {
    extend: {
      colors: {
        primary: {
          50: '#eff6ff',
          500: '#3b82f6',
          600: '#2563eb',
          700: '#1d4ed8',
          900: '#1e3a8a',
        },
        corporate: {
          blue: '#1e40af',
          'blue-light': '#3b82f6',
        }
      },
      fontFamily: {
        sans: ['Inter', 'system-ui', 'sans-serif'],
      },
      maxWidth: {
        'app': '1200px',
      },
      boxShadow: {
        'card': '0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1)',
        'card-hover': '0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)',
      }
    },
  },
  plugins: [],
}
```

### **src/index.css**
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-sans;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

@layer components {
  .btn-primary {
    @apply bg-corporate-blue text-white px-4 py-2 rounded-lg hover:bg-corporate-blue/90 transition-colors duration-200;
  }

  .card {
    @apply bg-white dark:bg-slate-800 border border-slate-200 dark:border-slate-700 rounded-lg shadow-card;
  }

  .card-hover {
    @apply hover:shadow-card-hover transition-shadow duration-200;
  }
}
```

## **Atividade 4: Estrutura de componentes + roteamento**

### **src/App.tsx**
```tsx
import { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom'
import { ThemeProvider } from './contexts/ThemeContext'
import { AuthProvider, useAuth } from './contexts/AuthContext'
import Login from './pages/Login'
import Inference from './pages/Inference'
import Insights from './pages/Insights'
import Data from './pages/Data'

function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { isAuthenticated } = useAuth()
  return isAuthenticated ? <>{children}</> : <Navigate to="/login" />
}

function App() {
  return (
    <ThemeProvider>
      <AuthProvider>
        <Router>
          <div className="min-h-screen bg-slate-50 dark:bg-slate-900 transition-colors duration-200">
            <Routes>
              <Route path="/login" element={<Login />} />
              <Route path="/inference" element={
                <ProtectedRoute>
                  <Inference />
                </ProtectedRoute>
              } />
              <Route path="/insights" element={
                <ProtectedRoute>
                  <Insights />
                </ProtectedRoute>
              } />
              <Route path="/data" element={
                <ProtectedRoute>
                  <Data />
                </ProtectedRoute>
              } />
              <Route path="/" element={<Navigate to="/login" />} />
            </Routes>
          </div>
        </Router>
      </AuthProvider>
    </ThemeProvider>
  )
}

export default App
```

### **src/pages/Login.tsx**
```tsx
export default function Login() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="w-full max-w-md">
        <h1 className="text-2xl font-bold text-center text-slate-900 dark:text-white mb-8">
          Login - Dados do Futuro
        </h1>
        {/* Implementaremos na prÃ³xima etapa */}
      </div>
    </div>
  )
}
```

### **src/pages/Inference.tsx**
```tsx
export default function Inference() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <div className="text-center">
        <h1 className="text-2xl font-bold text-slate-900 dark:text-white mb-8">
          IBM Granite Time Series TTM R2
        </h1>
        {/* Implementaremos na etapa 4 */}
      </div>
    </div>
  )
}
```

### **src/pages/Insights.tsx**
```tsx
export default function Insights() {
  return (
    <div className="max-w-app mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-slate-900 dark:text-white mb-8">
        Insights
      </h1>
      {/* Implementaremos na etapa 5 */}
    </div>
  )
}
```

### **src/pages/Data.tsx**
```tsx
export default function Data() {
  return (
    <div className="max-w-app mx-auto px-4 py-8">
      <h1 className="text-2xl font-bold text-slate-900 dark:text-white mb-8">
        Dados
      </h1>
      {/* Implementaremos na etapa 6 */}
    </div>
  )
}
```

## **Atividade 5: Context para modo escuro + Auth**

### **src/contexts/ThemeContext.tsx**
```tsx
import { createContext, useContext, useEffect, useState } from 'react'

type Theme = 'light' | 'dark'

interface ThemeContextType {
  theme: Theme
  toggleTheme: () => void
}

const ThemeContext = createContext<ThemeContextType | undefined>(undefined)

export function ThemeProvider({ children }: { children: React.ReactNode }) {
  const [theme, setTheme] = useState<Theme>('light')

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') as Theme
    if (savedTheme) {
      setTheme(savedTheme)
    }
  }, [])

  useEffect(() => {
    const root = window.document.documentElement
    root.classList.remove('light', 'dark')
    root.classList.add(theme)
    localStorage.setItem('theme', theme)
  }, [theme])

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light')
  }

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  )
}

export function useTheme() {
  const context = useContext(ThemeContext)
  if (!context) {
    throw new Error('useTheme must be used within a ThemeProvider')
  }
  return context
}
```

### **src/contexts/AuthContext.tsx**
```tsx
import { createContext, useContext, useState } from 'react'

interface AuthContextType {
  isAuthenticated: boolean
  login: (username: string, password: string) => boolean
  logout: () => void
}

const AuthContext = createContext<AuthContextType | undefined>(undefined)

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState(false)

  const login = (username: string, password: string): boolean => {
    if (username === 'massa' && password === 'sohipren') {
      setIsAuthenticated(true)
      return true
    }
    return false
  }

  const logout = () => {
    setIsAuthenticated(false)
  }

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  )
}

export function useAuth() {
  const context = useContext(AuthContext)
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider')
  }
  return context
}
```

### **Estrutura final de pastas:**
```
src/
â”œâ”€â”€ contexts/
â”‚   â”œâ”€â”€ AuthContext.tsx
â”‚   â””â”€â”€ ThemeContext.tsx
â”œâ”€â”€ pages/
â”‚   â”œâ”€â”€ Login.tsx
â”‚   â”œâ”€â”€ Inference.tsx
â”‚   â”œâ”€â”€ Insights.tsx
â”‚   â””â”€â”€ Data.tsx
â”œâ”€â”€ App.tsx
â”œâ”€â”€ index.css
â””â”€â”€ main.tsx
```

## **ðŸ§ª Teste da Etapa 1:**
```bash
npm run dev
```

**Resultado esperado:**
- âœ… Projeto rodando em http://localhost:5173
- âœ… NavegaÃ§Ã£o bÃ¡sica funcionando
- âœ… Modo escuro/claro funcionando (toggle manual no DevTools)
- âœ… AutenticaÃ§Ã£o bÃ¡sica (massa/sohipren)
- âœ… Design tokens aplicados

**Pronto para prÃ³xima etapa!** ðŸš€
